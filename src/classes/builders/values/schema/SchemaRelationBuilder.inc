<?php

/**
 * Class SchemaRelationValueBuilder
 */
class SchemaRelationValueBuilder extends SchemaValueBuilder {
  /**
   * @var string $referencePropertyName
   */
  protected $referencePropertyName;

  /**
   * @var string $referencePropertyType
   */
  protected $referencePropertyType;

  /**
   * @var array $referencePropertyInfo
   */
  protected $referencePropertyInfo = array();

  /**
   * @var string $referencePropertyFieldName
   */
  protected $referencePropertyFieldName;

  /** {{@inheritdoc}} */
  public function __construct($entityType, $tableKey) {
    parent::__construct($entityType, $tableKey, "relation");
    $this->defaultDescription = "A relation table between %entity_type% and %relation_entity%";
    $this->setReferencePropertyName();
    $this->setReferencePropertyType();
    $this->setReferencePropertyInfo();
    $this->setReferencePropertyFieldName();
  }

  /**
   * Guess the relation property name from the schema name.
   */
  protected function setReferencePropertyName() {
    if (($search = array_search($this->toolboxInfo['tables']['relation'], $this->tableKey)) !== FALSE) {
      $keys                        = array_keys($this->toolboxInfo['tables']['relation']);
      $this->referencePropertyName = $this->toolboxInfo['tables']['relation'][$keys[$search]];
    }
  }

  /**
   * Sets the reference property type.
   */
  protected function setReferencePropertyType() {
    $this->referencePropertyType = $this->toolboxInfo['properties'][$this->referencePropertyName]['reference'];
  }

  /**
   * Gets the entity info of the related entity for which the relation table is built.
   */
  protected function setReferencePropertyInfo() {
    $this->referencePropertyInfo = reference_entity_info($this->referencePropertyType);
  }

  /**
   * Sets the relation property field name within the table.
   */
  protected function setReferencePropertyFieldName() {
    if (!empty($this->toolboxInfo['properties'][$this->referencePropertyName]['schemas_fields']['relation'])) {
      $this->referencePropertyFieldName = $this->toolboxInfo['properties'][$this->referencePropertyName]['schemas_fields']['relation'];
    }
    else {
      if ($this->entityType != $this->referencePropertyType) {
        $this->referencePropertyFieldName = $this->referencePropertyInfo['keys']['id'];
      }
      else {
        $this->referencePropertyFieldName = "ref_" . $this->referencePropertyType . "_id";
      }
    }
  }

  /** {{@inheritdoc}} */
  protected function buildDescription() {
    $this->processedValueData['description'] = "A relation table between $this->entityType and $this->referencePropertyType";
  }

  /** {{@inheritdoc}} */
  protected function buildFields() {
    $this->processedValueData['fields'][$this->toolboxInfo['keys']['id']]  = array(
      'type'     => 'int',
      'not null' => TRUE,
      'default'  => 0
    );
    $this->processedValueData['fields'][$this->referencePropertyFieldName] = array(
      'type'     => 'int',
      'not null' => TRUE,
      'default'  => 0
    );
  }

  public function build() {
    return parent::build(); // TODO: Change the autogenerated stub
  }

}