<?php

/**
 * Class EntityToolboxUIControllerFieldable
 *
 * The default UI Controller for fieldable entities.
 */
class EntityToolboxUIControllerFieldable extends EntityToolboxUIController {

  /**
   *{@inheritdoc}
   */
  public function entityEditForm($form, &$form_state, $entity, $options = array()) {
    $form += parent::entityEditForm($form, $form_state, $entity, $options);
    //Attach the entity properties to the form.
    properties_attach_form($this->entityType, $entity, $form, $form_state);
    //Attach the entity fields to the form.
    field_attach_form($this->entityType, $entity, $form, $form_state);

    $form['actions'] = array(
      '#type'       => 'container',
      '#attributes' => array('class' => array('form-actions')),
      '#weight'     => 400,
    );
    $submit          = array();
    if (!empty($form['#submit'])) {
      $submit += $form['#submit'];
    }
    $form['actions']['submit'] = array(
      '#type'   => 'submit',
      '#value'  => t('Save'),
      '#submit' => $submit + array('entity_toolbox_ui_edit_form_submit'),
    );
    if (!empty($entity->name)) {
      $form['actions']['delete'] = array(
        '#type'   => 'submit',
        '#value'  => t('Delete'),
        '#suffix' => l(t('Cancel'), entity_get_path($this->entityType, 'admin')),
        '#submit' => $submit + array('entity_toolbox_form_submit_delete'),
        '#weight' => 45,
      );
    }
    $form['#validate'][] = 'entity_toolbox_ui_edit_form_validate';

    //Let other modules alter the form.
    _entity_edit_form__alter($form, $form_state, $this->entityType, $entity);

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function entityEditFormValidate($form, &$form_state) {
    parent::entityEditFormValidate($form, $form_state);
  }

  /**
   * Submit callback for the entity form.
   *
   * @param $form
   *   The form to submit, passed by reference.
   * @param $form_state
   *   The form state.
   */
  public function entityEditFormSubmit(&$form, &$form_state) {
    parent::entityEditFormSubmit($form, $form_state);
    $entity = $form_state[$this->entityType];
    field_attach_submit($this->entityType, $entity, $form, $form_state);
  }

  /**
   * Builds the entity delete_form.
   *
   * @param array  $form
   *   The entity form built by drupal_get_form.
   * @param array  $form_state
   *   The form_state generated by drupal_get_form.
   * @param object $entity
   *   The entity to be deleted.
   * @param array  $options
   *   The form options.
   *
   * @return array
   */
  public function entityDeleteForm($form, &$form_state, $entity, $options = array()) {
    $form_state['entity_type']     = $this->entityType;
    $form_state[$this->entityType] = $entity;

    $form_state['#options'] = $options;
    $form['#submit'][]      = 'entity_toolbox_delete_form_submit';
    $form                   = confirm_form(
      $form,
      t('Are you sure you want to delete %entity_label %name?', array(
        '%entity_label' => $this->toolboxInfo(),
        '%name'         => $entity->name
      )),
      entity_get_path($this->entityType, 'manage'),
      '<p>' . t('This action cannot be undone.') . '</p>',
      t('Delete'),
      t('Cancel'),
      'confirm'
    );
  }

  /**
   * {@inheritdoc}
   **/
  public function entityDeleteFormValidate($form, &$form_state) {
    parent::entityDeleteFormValidate($form, $form_state);
  }

  /**
   * {@inheritdoc}
   **/
  public function entityDeleteFormSubmit(&$form, &$form_state) {
    parent::entityDeleteFormSubmit($form, $form_state);
  }

  /**
   * Provides the menu items for hook_menu().
   *
   * @see hook_menu().
   */
  public function hook_menu() {
    $items           = array();
    $id_count        = $this->id_count;
    $label           = $this->labelSingle();
    $create_callback = $this->toolboxInfo['callbacks']['create'];
    $access_callback = $this->toolboxInfo['callbacks']['access'];
    $page_callback   = $this->toolboxInfo['callbacks']['page'];
    $title_callback  = $this->toolboxInfo['callbacks']['title'];
    $wildcard        = $this->wildcard();
    $items += $this->rootMenuItemBuild();

    $items[$this->path . '/add'] = array(
      'title'            => "Add a $label",
      'description'      => "Add a new $label.",
      'page callback'    => 'entity_toolbox_ui_add_page',
      'page arguments'   => array($this->entityType),
      'access callback'  => $access_callback,
      'access arguments' => array('edit'),
      'type'             => MENU_NORMAL_ITEM,
      'weight'           => 20,
      'file'             => 'entity_toolbox.entities.functions.inc',
      'file path'        => ENTITY_TOOLBOX_PATH,
    );
    foreach (entity_get_types($this->entityType) as $type) {
      $items[$this->path . '/add/' . $type->type] = array(
        'title'            => "Add $type->label",
        'page callback'    => 'entity_toolbox_ui_edit_form',
        'page arguments'   => array($create_callback(array('type' => $type->type))),
        'access callback'  => $access_callback,
        'access arguments' => array('edit', 'edit ' . $type->type),
        'file'             => 'entity_toolbox.entities.functions.inc',
        'file path'        => ENTITY_TOOLBOX_PATH,
      );
    }
    $items[$this->entityType . '/' . $wildcard]             = array(
      'page callback'    => 'entity_toolbox_ui_edit_form',
      'page arguments'   => array($id_count + 1),
      'access callback'  => $access_callback,
      'access arguments' => array('edit', $id_count + 1),
      'weight'           => 0,
      'context'          => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file'             => 'entity_toolbox.entities.functions.inc',
      'file path'        => ENTITY_TOOLBOX_PATH,
    );
    $items[$this->entityType . '/' . $wildcard . '/edit']   = array(
      'title'   => 'Edit',
      'type'    => MENU_DEFAULT_LOCAL_TASK,
      'weight'  => -10,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );
    $items[$this->entityType . '/' . $wildcard . '/view']   = array(
      'title'            => "View",
      'weight'           => -10,
      'page callback'    => $page_callback,
      'page arguments'   => array($id_count + 1),
      'access callback'  => $access_callback,
      'access arguments' => array('view', $id_count + 1),
      'type'             => MENU_LOCAL_TASK,
    );
    $items[$this->entityType . '/' . $wildcard . '/delete'] = array(
      'title'            => "Delete",
      'page callback'    => 'entity_toolbox_ui_delete_form',
      'page arguments'   => array($id_count + 1),
      'access callback'  => $access_callback,
      'access arguments' => array('edit', $id_count + 1),
      'type'             => MENU_LOCAL_TASK,
      'context'          => MENU_CONTEXT_INLINE,
      'weight'           => 10,
      'file'             => 'entity_toolbox.entities.functions.inc',
      'file path'        => ENTITY_TOOLBOX_PATH,
    );
    $items[$this->entityType . '/' . $wildcard]             = array(
      'title callback'   => $title_callback,
      'title arguments'  => array(1),
      'page callback'    => $page_callback,
      'page arguments'   => array(1),
      'access callback'  => $access_callback,
      'access arguments' => array('view', 1),
      'type'             => MENU_CALLBACK,
    );
  }

}