<?php

/**
 * Class EntityToolboxInfoPropertySchemasField
 */
class EntityToolboxInfoPropertySchemasFieldModel extends EntityToolboxInfoRecursiveModel {
  /**
   * @var string $schemaType
   */
  protected $schemaType;

  /** {{@inheritdoc}} */
  public function __construct(array $args = array()) {
    $schemaFieldModelInstance = new DrupalSchemaFieldModel(array('schema_type' => $args['schema_type']));
    $struct                   = $schemaFieldModelInstance->getStructure();
    $args                     = $this->mergeConstructArgs(
      array(
        'structure' => $struct
        //        'structure' => array(
        //          'description' => array(
        //            'type'     => 'string',
        //            'default'  => '%property_default_schemas_fields_base_description%',
        //            'unset if' => 'is_empty:c:'
        //          ),
        //          'type'        => array(
        //            'type'    => 'string',
        //            'default' => '%property_default_schemas_fields_base_type%',
        //          ),
        //          'serialize'   => array(
        //            'type'     => 'boolean',
        //            'default'  => '%property_default_schemas_fields_base_serialize%',
        //            'unset if' => 'is_null:c:'
        //          ),
        //          'size'        => array(
        //            'type'     => 'size',
        //            'default'  => '%property_default_schemas_fields_base_size%',
        //            'unset if' => 'is_empty:c:'
        //          ),
        //          'not null'    => array(
        //            'type'    => 'boolean',
        //            'default' => '%property_default_schemas_fields_base_not_null%',
        //          ),
        //          'default'     => array(
        //            'type'    => 'mixed',
        //            'default' => '%property_default_schemas_fields_base_default%',
        //          ),
        //          'length'      => array(
        //            'type'     => 'integer',
        //            'default'  => '%property_default_schemas_fields_base_length%',
        //            'unset if' => 'is_null:c:'
        //          ),
        //          'unsigned'    => array(
        //            'type'     => 'boolean',
        //            'default'  => '%property_default_schemas_fields_base_unsigned%',
        //            'unset if' => 'is_null:c:'
        //          ),
        //          'precision'   => array(
        //            'type'    => 'integer',
        //            'default' => '%property_default_schemas_fields_base_precision%',
        //          ),
        //          'scale'       => array(
        //            'type'     => 'integer',
        //            'default'  => '%property_default_schemas_fields_base_scale%',
        //            'unset if' => 'is_string:c:'
        //          ),
        //          'binary'      => array(
        //            'type'     => 'boolean',
        //            'default'  => '%property_default_schemas_fields_base_binary%',
        //            'unset if' => 'is_null:c:'
        //          ),
        //        )
      ),
      $args
    );
    parent::__construct($args);
  }

  /** {{@inheritdoc}} */
  protected function reprocessStructure($structure) {
    $replace = '%property_default_schemas_fields_' . $this->constructArgs['schema_type'] . '_';
    foreach ($structure as $key => $params) {
      if (!empty($params['default'])) {
        $default = &$structure[$key]['default'];
        $default = str_replace('%property_schemas_fields_' . $this->constructArgs['schema_type'] . '_', $replace, $default);
      }
    }

    return $structure;
  }

  protected function setStructure($structure) {
    $reprocessed = $this->reprocessStructure($structure);
    parent::setStructure($reprocessed); // TODO: Change the autogenerated stub
  }

  /**
   * @return mixed
   */
  public function getSchemaType() {
    return $this->schemaType;
  }

  /**
   * @param mixed $schemaType
   */
  public function setSchemaType($schemaType) {
    $this->schemaType = $schemaType;
  }
}